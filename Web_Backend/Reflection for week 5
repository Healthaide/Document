JSP has three instructions
  A jsp page can have 0~N instructions defined!

1. page --> Most complex: <%@page language="java" info="xxx"...%>
  * pageEncoding and contentType:
    > pageEncoding: It specifies the encoding of the current jsp page, as long as it does not lie, it will not be garbled! You need to use pageEncoding when the server is going to compile jsp into .java!
    > contentType: It means adding a response header: Content-Type! Equivalence with response.setContentType("text/html;charset=utf-8");
    > If only two properties are provided, then the default value of the other is to set that one.
    > If both properties are not set, the default is iso
  * import: guide package! Can appear multiple times
  * errorPage and isErrorPage
    > errorPage: If the current page throws an exception, which page to forward to, specified by errorPage
    > isErrorPage: This specifies whether the current page is the wrong page! When this property is true, this page will set the status code to 500! And this page can use exceptions in 9 large built-in objects!
   * autoFlush and buffer
     > autoFlush: Specifies whether to automatically refresh the jsp output stream buffer. The default is true. If false, an exception is thrown when the buffer is full!
     > buffer: Specifies the buffer size. The default is 8kb. Normally it does not need to be modified!
   * isELIgnored: whether to ignore the el expression, the default value is false, do not ignore, that is, support!
   * Basically no:
     > language: Specifies the language type for the current jsp compilation. The default value is java.
     > info: information!
     > isThreadSafe: Does the current jsp support concurrent access!
     > session: whether the current page supports session, if false, then the current page has no session this built-in object!
     > extends: Let JSP generated by jsp inherit the class specified by this attribute!

2. include --> static include
  * Similar to RequestDispatcher's include() method!
  * <%@include%> It is completed when jsp is compiled into java file! Together they generate a java (a servlet) file and then generate a class!
  * RequestDispatcher's include() is a method that contains and is included with two servlets, two .class! They just merge the contents of the response at runtime!
  * Function: Decompose the page, use the included method to group together, the constant part of such a page is an independent jsp, and we only need to deal with the changed page.

3. taglib --> import tag library
  * Two attributes:
    > prefix: Specifies the prefix of the tag library on this page! From our own name!
    > uri: Specify the location of the tag library!
    > <%@taglib prefix="s" uri="/struts-tags"%> Usage of prefix <s:text>
    
=========================================

Nine built-in objects

* out --> jsp output stream, used to respond to the client
* page --> current jsp object! Its reference type is Object, which has the following code in the real body: Object page = this;
* config --> It corresponds to the ServletConfig object in the real body!
* pageContext --> A top 9!
* request --> HttpServletEequest
* response --> HttpServletResponse
* exception --> Throwable
* session --> HttpSession
* application --> ServletContext

pageContext
  * There are three major domains in the Servlet, and there are four major domains in JSP, it is the last domain object!
    > ServletContext: The entire application
    > session: entire session (only one user in a session)
    > request: A request chain!
    > pageContext: a jsp page! This field is to share data between the tags used in the current jsp page and the current jsp page!
      > Domain objects
      > Proxy other domains: pageContext.setAttribute("xxx", "XXX", PageContext.SESSION_SCOPE);
      > Global search: pageContext.findAttribute ("xxx"); from small to large, dependent on the search!
      > Get 8 other built-in objects
